{"version":3,"sources":["logo.svg","beep.js","Timer.js","TimerSet.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","options","window","AudioContext","webkitAudioContext","context","frequency","interval","duration","beep","times","loop","i","currentTime","osc","createOscillator","gain","createGain","connect","destination","setValueAtTime","value","exponentialRampToValueAtTime","onended","disconnect","type","start","stop","play","setTimeout","destroy","close","TimerDiv","styled","div","shortbeep","Beep","longbeep","Timer","props","useState","time","setTime","originalTime","setOriginalTime","animate","newTime","Date","console","warn","onEnd","Math","ceil","useEffect","handle","requestAnimationFrame","cancelAnimationFrame","log","TimerSetDiv","TimerSet","setStart","timeset","setTimeset","running","setRunning","timesetstr","sections","split","section","repeat","labels","map","x","parseInt","length","atimeset","label","push","parseTimeset","buttonlabel","key","onClick","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,kICK5B,WAAUC,GAClBA,IAASA,EAAU,IACxBC,OAAOC,aAAeD,OAAOC,cAAgBD,OAAOE,mBACpD,IAAIC,EAAUJ,EAAQI,SAAW,IAAIH,OAAOC,aACxCG,EAAYL,EAAQK,WATV,IAUVC,EAAWN,EAAQM,UATV,IAUTC,EAAWP,EAAQO,UARL,EAgCdC,EAAO,SAAUC,GACdA,IAAOA,EAAQ,GAEnB,SAAUC,EAAMC,IAzBR,WACT,IAAIC,EAAcR,EAAQQ,YACtBC,EAAMT,EAAQU,mBACdC,EAAOX,EAAQY,aAEnBH,EAAII,QAAQF,GACZA,EAAKE,QAAQb,EAAQc,aAErBH,EAAKA,KAAKI,eAAeJ,EAAKA,KAAKK,MAAOR,GAC1CG,EAAKA,KAAKM,6BApBG,KAoBsCT,EAAcL,GAEjEM,EAAIS,QAAU,WACZP,EAAKQ,WAAWnB,EAAQc,aACxBL,EAAIU,WAAWR,IAGjBF,EAAIW,KAAO,OACXX,EAAIR,UAAUe,MAAQf,EACtBQ,EAAIY,MAAMb,GACVC,EAAIa,KAAKd,EAAcL,GAOrBoB,KACMhB,EAAIF,GAAOmB,WAAWlB,EAAMJ,EAAUK,GAF7C,CAGE,IAOL,OAJAH,EAAKqB,QAAU,WACR7B,EAAQI,SAASA,EAAQ0B,SAGzBtB,G,gRC3CT,IAAMuB,EAAWC,IAAOC,IAAV,KAYRC,EAAYC,EAAK,CAAC5B,SAAS,KAC3B6B,EAAWD,EAAK,CAAC7B,SAAS,IAAKC,SAAS,MAgE/B8B,EA9DD,SAACC,GAAW,IAAD,EACAC,mBAASD,EAAME,MADf,mBAChBA,EADgB,KACXC,EADW,OAEgBF,mBAASD,EAAME,MAF/B,mBAEhBE,EAFgB,KAEHC,EAFG,KAIjBC,EAAU,WACd,GAAIN,EAAMb,MAAO,CACf,IAAIoB,EAAUH,GAAiB,IAAII,KAASR,EAAMb,OAAO,IACrDoB,GAAW,IACpBA,EAAU,EACVJ,EAAQ,GACRM,QAAQC,KAAK,WACbV,EAAMW,UAGFC,KAAKC,KAAKX,GAAQU,KAAKC,KAAKN,KAC1BA,GAAW,GACbX,EAAU,GAERW,GAAW,GACbT,EAAS,IAGbK,EAAQI,MAiCP,OA5BAO,qBAAU,WAER,IAAMC,EAASC,sBAAsBV,GACrC,OAAO,WACLW,qBAAqBF,MAEvB,CAACb,IAEHY,qBAAU,WACR,GAAId,EAAMb,MAAO,CACfsB,QAAQC,KAAK,uCAAwCV,EAAOE,GAC5D,IAAMa,EAASC,sBAAsBV,GACrC,OAAO,WACZW,qBAAqBF,IAIhBN,QAAQS,IAAI,yBACZb,EAAgBH,KAEjB,CAACF,EAAMb,QAEV2B,qBAAU,WACRL,QAAQS,IAAI,8BAA+BlB,EAAME,MACjDG,EAAgBL,EAAME,QACtB,CAACF,EAAME,OAIP,kBAACT,EAAD,MACa,IAAVS,EAAcU,KAAKC,KAAKX,GAAQ,Q,8sBCzEvC,IAAMiB,EAAczB,IAAOC,IAAV,KAyGFyB,EA3DE,SAACpB,GAAW,IAAD,EACDC,mBAAS,MADR,mBACnBd,EADmB,KACbkC,EADa,OAEGpB,mBAAS,MAFZ,mBAEnBqB,EAFmB,KAEXC,EAFW,OAGItB,mBAAS,GAHb,mBAGnBuB,EAHmB,KAGVC,EAHU,KA+B1B,GATAX,qBAAU,WACR,IAAMQ,EAlBa,SAACI,GACpB,IAAMJ,EAAU,GACVK,EAAWD,EAAWE,MAAM,KAFA,uBAGlC,YAAoBD,EAApB,+CAA8B,CAAC,IAAtBE,EAAqB,UACAA,EAAQD,MAAM,KADd,mBACvBE,EADuB,KAChBC,EADgB,KACT5D,EADS,KAE5BA,EAAQA,EAAMyD,MAAM,KAAKI,KAAI,SAAAC,GAAC,OAAEC,SAASD,MACzCF,EAASA,EAAOH,MAAM,KACtBnB,QAAQS,IAAI,QAASY,EAAQC,EAAQ5D,EAAO0D,GAC5C,IAAK,IAAIxD,EAAI,EAAGA,EAAIyD,EAAOC,EAAOI,OAAQ9D,IAAK,CACpD,IAAI+D,EAAW,CAACC,MAAON,EAAO1D,EAAI0D,EAAOI,QAASjC,KAAM/B,EAAME,EAAIF,EAAMgE,SACxEb,EAAQgB,KAAKF,KAVwB,kFAclC,OADA3B,QAAQS,IAAI,SAAUI,GACfA,EAISiB,CAAavC,EAAMsB,SACnCC,EAAWD,KACX,IAEFR,qBAAU,WACRL,QAAQC,KAAK,qCAAsCvB,KACnD,CAACA,KAEEmC,IAAYA,EAAQE,GACvB,OAAO,KAhCiB,MAmCLF,EAAQE,GAAtBtB,EAnCmB,EAmCnBA,KAAKmC,EAnCc,EAmCdA,MACZ5B,QAAQS,IAAI,QAASmB,EAAOnC,EAAMsB,EAASF,GAE3C,IAAMkB,EAAcrD,EAAQ,QAAU,MAEtC,OACE,kBAACgC,EAAD,KACE,2CAAaK,EAAQ,EAArB,cAA4BF,EAAQa,SACpC,kBAAC,EAAD,eAAOM,IAAKjB,GAAa,CAACtB,OAAMmC,QAAOb,WAAvC,CACAb,MAAO,WACLF,QAAQC,KAAK,uBACbW,EAAS,MACTI,GAAW,SAAAD,GAAO,OAAEA,EAAQ,KAC5BH,EAAS,IAAIb,OAEpBrB,MAAOA,KACP,+BAAQkD,GACR,mCACE,4BAAQK,QAAS,kBAAYrB,EAARlC,EAAiB,KAAiB,IAAIqB,QAAUgC,MC1FzDG,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAUtB,QAAS,iDCILuB,QACW,cAA7BlF,OAAOmF,SAASC,UAEe,UAA7BpF,OAAOmF,SAASC,UAEhBpF,OAAOmF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cff052cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var FREQUENCY = 440\nvar INTERVAL = 250\nvar RAMP_VALUE = 0.0001\nvar RAMP_DURATION = 1\n\nexport default function (options) {\n  if (!options) options = {}\n  window.AudioContext = window.AudioContext || window.webkitAudioContext\n  var context = options.context || new window.AudioContext()\n  var frequency = options.frequency || FREQUENCY\n  var interval = options.interval || INTERVAL\n  var duration = options.duration || RAMP_DURATION;\n\n  var play = function () {\n    var currentTime = context.currentTime\n    var osc = context.createOscillator()\n    var gain = context.createGain()\n\n    osc.connect(gain)\n    gain.connect(context.destination)\n\n    gain.gain.setValueAtTime(gain.gain.value, currentTime)\n    gain.gain.exponentialRampToValueAtTime(RAMP_VALUE, currentTime + duration)\n\n    osc.onended = function () {\n      gain.disconnect(context.destination)\n      osc.disconnect(gain)\n    }\n\n    osc.type = 'sine'\n    osc.frequency.value = frequency\n    osc.start(currentTime)\n    osc.stop(currentTime + duration)\n  }\n\n  var beep = function (times) {\n    if (!times) times = 1\n\n    ;(function loop (i) {\n      play()\n      if (++i < times) setTimeout(loop, interval, i)\n    })(0)\n  }\n\n  beep.destroy = function () {\n    if (!options.context) context.close()\n  }\n\n  return beep\n}\n","import React,{useEffect, useState} from 'react';\nimport Beep from './beep.js';\n\nimport styled from 'styled-components';\n\nconst TimerDiv = styled.div`\n   display:flex;\n   align-items: flex-end;\n   justify-content:center;\n   flex:1;\n   color:white;\n   font-size:7em;\n   letter-spacing:1px;\n   font-family:monospace;\n   max-height:120px;\n`;\n\nconst shortbeep = Beep({duration:0.8});\nconst longbeep = Beep({interval:300, duration:1.2});\n\nconst Timer = (props) => {\n  const [time,setTime] = useState(props.time);\n  const [originalTime,setOriginalTime] = useState(props.time);\n\n  const animate = ()=>{\n    if (props.start) {\n      let newTime = originalTime - ((new Date() - props.start)/1000);\n      if (newTime <= 0.2) {\n\tnewTime = 0;\n\tsetTime(0);\n\tconsole.warn('ending!');\n\tprops.onEnd();\n      }\n      else {\n\tif (Math.ceil(time) > Math.ceil(newTime)) {\n\t  if (newTime <= 3) {\n\t    shortbeep(1);\n\t  }\n\t  if (newTime <= 1) {\n\t    longbeep(1);\n\t  }\n\t}\n\tsetTime(newTime);\n      }\n    }\n  };\n\n  useEffect(()=>{\n    \n    const handle = requestAnimationFrame(animate);\n    return ()=>{\n      cancelAnimationFrame(handle);\n    };\n  },[time]);\n\n  useEffect(()=> {\n    if (props.start) {\n      console.warn('Timer starts! use effect timer start', props, time);\n      const handle = requestAnimationFrame(animate);\n      return ()=>{\n\tcancelAnimationFrame(handle);\n      };\n    }\n    else {\n      console.log('setting original time');\n      setOriginalTime(time);\n    }\n  }, [props.start]);\n\n  useEffect(()=> {\n    console.log('props.time changed, setting', props.time);\n    setOriginalTime(props.time);\n  },[props.time]);\n\n\n  return (\n    <TimerDiv>\n      {time !== -1 ? Math.ceil(time) : 'fin'}\n    </TimerDiv>\n  );\n}\n\nexport default Timer;\n","import React,{useEffect, useState} from 'react';\nimport Timer from './Timer.js';\nimport styled from 'styled-components';\n\nconst TimerSetDiv = styled.div`\n  flex:1;\n  display:flex;\n  flex-direction:column;\n  justify-content:center;\n  align-items:center;\n\n  background:black;\n\n  padding:20px;\n\n  buttondiv {\n    display:flex;\n    flex:1;\n  }\n  button {\n   cursor:pointer;\n   border:none;\n   background:blue;\n   width:50px;\n   height:50px;\n   color:white;\n   text-transform:uppercase;\n   padding:10px;\n   border-radius:100px;\n   flex:1;\n  }\n\n  counter {\n    align-items:flex-end;\n    display: flex;\n    flex:1;\n    color:white;\n    font-size:20px;\n  }\n\n  label {\n   font-size:30px;\n   margin-top:30px;\n   text-transform:uppercase;\n   color:white;\n   flex:1;\n  }\n`;\n\n\nconst TimerSet = (props) => {\n  const [start,setStart] = useState(null);\n  const [timeset,setTimeset] = useState(null);\n  const [running, setRunning] = useState(0);\n\n  const parseTimeset = (timesetstr)=> {\n    const timeset = [];\n    const sections = timesetstr.split(' ');\n    for (let section of sections) {\n      let [repeat,labels,times] = section.split(',');\n      times = times.split('/').map(x=>parseInt(x));\n      labels = labels.split('/');\n      console.log('parts', repeat, labels, times, section);\n      for (let i = 0; i < repeat*labels.length; i++) {\n\tlet atimeset = {label: labels[i % labels.length], time: times[i % times.length]};\n\ttimeset.push(atimeset);\n      }\n    }\n    console.log('parsed', timeset);\n    return timeset;\n  };\n\n  useEffect(()=>{\n    const timeset = parseTimeset(props.timeset);\n    setTimeset(timeset);\n  },[]);\n  \n  useEffect(()=>{\n    console.warn('start changed! start from timerset', start);\n  },[start]);\n\n  if (!timeset || !timeset[running]) {\n    return null;\n  }\n\n  const {time,label} = timeset[running];\n  console.log('label', label, time, running, timeset);\n\n  const buttonlabel = start ? 'pause' : 'run';\n  \n  return (\n    <TimerSetDiv>\n      <counter>{`${running+1} / ${timeset.length}`}</counter>\n      <Timer key={running} {...{time, label, running}}\n\t     onEnd={()=> {\n\t       console.warn('on end on timerset!');\n\t       setStart(null); // because we set 2 states here, prevent 2 starts\n\t       setRunning(running=>running+1);\n\t       setStart(new Date());\n\t}}\n\tstart={start} />\n\t<label>{label}</label>\n\t<buttondiv>\n\t  <button onClick={()=>start ? setStart(null) : setStart(new Date())}>{buttonlabel}</button>\n\t</buttondiv>\n    </TimerSetDiv>\n  );\n}\n\nexport default TimerSet;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TimerSet from './TimerSet.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TimerSet timeset={'1,ready?,5 2,work/rest,5/3 2,work/rest,6/4'} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}