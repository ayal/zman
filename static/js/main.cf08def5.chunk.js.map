{"version":3,"sources":["logo.svg","beep.js","Timer.js","TimerSet.js","App.js","utils.js","serviceWorker.js","index.js"],"names":["module","exports","window","AudioContext","webkitAudioContext","audiocontext","fgain","createGain","connect","destination","options","console","warn","state","frequency","interval","duration","beep","times","loop","i","currentTime","osc","createOscillator","gain","setValueAtTime","value","exponentialRampToValueAtTime","start","stop","onended","disconnect","play","setTimeout","destroy","context","close","TimerDiv","styled","div","shortbeep","Beep","Timer","props","useState","time","setTime","originalTime","setOriginalTime","animate","newTime","Date","onEnd","Math","ceil","useEffect","handle","requestAnimationFrame","cancelAnimationFrame","log","TimerSetDiv","TimerSet","setStart","timeset","setTimeset","running","setRunning","timesetquery","URLSearchParams","useLocation","search","get","timesetstr","sections","split","section","repeat","labels","map","x","parseInt","length","atimeset","label","push","parseTimeset","progress","slice","reduce","a","b","nexttime","nextlabel","buttonicon","key","onClick","className","LinearProgress","variant","color","Fab","aria-label","resume","App","noSleep","document","addEventListener","enableNoSleep","removeEventListener","enable","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf08def5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var FREQUENCY = 440\nvar INTERVAL = 250\nvar RAMP_VALUE = 0.0001\nvar RAMP_DURATION = 1\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext\nwindow.audiocontext = window.audiocontext || new window.AudioContext()\nlet audiocontext = window.audiocontext;\nvar fgain = audiocontext.createGain()\nfgain.connect(audiocontext.destination)\n\nexport default function (options) {\n\n  if (!options) options = {}\n  console.warn('AUDIO', audiocontext.state);\n  var frequency = options.frequency || FREQUENCY\n  var interval = options.interval || INTERVAL\n  var duration = options.duration || RAMP_DURATION;\n\n  var play = function () {\n    console.warn('AUDIO play', audiocontext.state);\n    var currentTime = audiocontext.currentTime\n    var osc = audiocontext.createOscillator()\n    var gain = audiocontext.createGain()\n    osc.connect(gain)\n    gain.connect(fgain);\n\n    gain.gain.setValueAtTime(gain.gain.value, audiocontext.currentTime);\n    gain.gain.exponentialRampToValueAtTime(0.001, audiocontext.currentTime + duration);\n\n    osc.start(0);\n    osc.stop(currentTime + duration);\n\n    \n    osc.onended = function () {\n      gain.disconnect(fgain);\n      osc.disconnect(gain);\n    }\n  }\n\n  var beep = function (times) {\n    if (!times) times = 1\n\n    ;(function loop (i) {\n      play()\n      if (++i < times) setTimeout(loop, interval, i)\n    })(0)\n  }\n\n  beep.destroy = function () {\n    if (!options.context) audiocontext.close()\n  }\n\n  return beep\n}\n","import React,{useEffect, useState} from 'react';\nimport Beep from './beep.js';\n\nimport styled from 'styled-components';\n\nconst TimerDiv = styled.div`\n   display:flex;\n   align-items: flex-end;\n   justify-content:center;\n   flex:1;\n   font-size:10em;\n   letter-spacing:1px;\n    max-height: 180px;\n    align-items: center;\n`;\n\nconst shortbeep = Beep({duration:0.2});\n\nconst Timer = (props) => {\n  const [time,setTime] = useState(props.time);\n  const [originalTime,setOriginalTime] = useState(props.time);\n\n  const animate = ()=>{\n    if (props.start) {\n      let newTime = originalTime - ((new Date() - props.start)/1000);\n      if (newTime <= 0.2) {\n\tnewTime = 0;\n\tsetTime(0);\n\tconsole.warn('ending!');\n\tprops.onEnd();\n      }\n      else {\n\tif (Math.ceil(time) > Math.ceil(newTime)) {\n\t  if (newTime <= 3) {\n\t    shortbeep(1);\n\t  }\n\t  if (newTime <= 1) {\n\t    shortbeep(2);\n\t  }\n\t}\n\tsetTime(newTime);\n      }\n    }\n  };\n\n  useEffect(()=>{\n    \n    const handle = requestAnimationFrame(animate);\n    return ()=>{\n      cancelAnimationFrame(handle);\n    };\n  },[time]);\n\n  useEffect(()=> {\n    if (props.start) {\n      console.warn('Timer starts! use effect timer start', props, time);\n      const handle = requestAnimationFrame(animate);\n      return ()=>{\n\tcancelAnimationFrame(handle);\n      };\n    }\n    else {\n      console.log('setting original time');\n      setOriginalTime(time);\n    }\n  }, [props.start]);\n\n  useEffect(()=> {\n    console.log('props.time changed, setting', props.time);\n    setOriginalTime(props.time);\n  },[props.time]);\n\n\n  return (\n    <TimerDiv>\n      {time !== -1 ? Math.ceil(time) : 'fin'}\n    </TimerDiv>\n  );\n}\n\nexport default Timer;\n","import React,{useEffect, useState} from 'react';\nimport Timer from './Timer.js';\nimport styled from 'styled-components';\nimport Beep from './beep.js';\n\nimport Fab from '@material-ui/core/Fab';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport {\n  useLocation\n} from \"react-router-dom\";\n\nconst shortbeep = Beep({duration:0.2, interval:150});\n\nconst TimerSetDiv = styled.div`\n  flex:1;\n  display:flex;\n  flex-direction:column;\n  justify-content:center;\n  align-items:center;\n\n  background:black;\n\n  padding:20px;\n\n  buttondiv {\n    position:relative;\n    display:flex;\n    flex:1;\n    max-height:50px;\n  }\n  button {\n   text-transform:uppercase;\n   flex:1;\n  }\n\n  counter {\n    display: flex;\n    flex-direction:column;\n    flex:1;\n    font-size:20px;\n    max-height: 40px;\n    align-items: center;\n  }\n\n  .progress {\n    padding-top:15px;\n    width:100px;\n    .MuiLinearProgress-root {\n     height:8px;\n    }\n \n  } \n\n  label {\n   text-transform:capitalize;\n   max-height:50px;\n   font-size:30px;\n   flex:1;\n   align-items:flex-start;\n  }\n\n  sublabel {\n   display:flex;\n   cursor:pointer;\n   max-height:40px;\n   font-size:16px;\n   color:grey;\n   flex:1;\n   align-items:center;\n  }\n\n`;\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\n\nconst TimerSet = (props) => {\n  const [start,setStart] = useState(null);\n  const [timeset,setTimeset] = useState(null);\n  const [running, setRunning] = useState(0);\n\n  let query = useQuery();\n  let timesetquery = query.get('set'); \n  if (!timesetquery) {\n    timesetquery = `1,Get ready,5|9,Work/Rest,30/10`;\n  }\n\n\n  const parseTimeset = (timesetstr)=> {\n    const timeset = [];\n    const sections = timesetstr.split('|');\n    for (let section of sections) {\n      let [repeat,labels,times] = section.split(',');\n      times = times.split('/').map(x=>parseInt(x));\n      labels = labels.split('/');\n      console.log('parts', repeat, labels, times, section);\n      for (let i = 0; i < repeat*labels.length; i++) {\n\tlet atimeset = {label: labels[i % labels.length], time: times[i % times.length]};\n\ttimeset.push(atimeset);\n      }\n    }\n    console.log('parsed', timeset);\n    return timeset;\n  };\n\n  useEffect(()=>{\n    const timeset = parseTimeset(timesetquery);\n    setTimeset(timeset);\n  },[]);\n  \n  useEffect(()=>{\n    console.warn('start changed! start from timerset', start);\n  },[start]);\n\n  if (!timesetquery) {\n    return null;\n  }\n\n  if (!timeset || !timeset[running]) {\n    return null;\n  }\n  \n  const progress = timeset.slice(0,running+1).reduce((a,b)=>(a + b.time), 0) / timeset.reduce((a,b)=>(a + b.time), 0) * 100;\n  \n  console.log('progress', progress);\n  \n  const {time,label} = timeset[running];\n  const {time:nexttime,label:nextlabel} = timeset[running+1] || {};\n  \n  console.log('label', label, time, running, timeset);\n\n  const buttonicon = start ? <PauseIcon /> : <PlayArrowIcon />;\n  \n  return (\n    <TimerSetDiv>\n      <label>{label}</label>\n      <Timer key={running} {...{time, label, running}}\n\t     onEnd={()=> {\n\t       console.warn('on end on timerset!');\n\t       setStart(null); // because we set 2 states here, prevent 2 starts\n\t       if (timeset[running+1]) {\n\t\t setRunning(running=>running+1);\n\t\t setStart(new Date());\n\t       }\n\t       else {\n\t\t shortbeep(3);\n\t       }\n\t}}\n\tstart={start} />\n\t<sublabel onClick={()=>{\n\t    setStart(null); // because we set 2 states here, prevent 2 starts\n\t    if (timeset[running+1]) {\n\t      setRunning(running=>running+1);\n\t    }\n\t  }}>{nextlabel ? `Next: ${nextlabel} / ${nexttime}` : ``}</sublabel>\n\t<counter>\n\t  <div className=\"progress\"><LinearProgress variant=\"determinate\" value={progress} color=\"secondary\" /></div>\n\t</counter>\n\t<buttondiv>\n\t  <Fab color=\"primary\" aria-label=\"run\"\n\t       onClick={()=> {\n\t\t if (window.audiocontext.state === 'suspended') {\n\t\t   window.audiocontext.resume();\n\t\t }\n\t\t start ? setStart(null) : setStart(new Date())\n\t    }}>\n\t    {buttonicon}\n\t  </Fab>\n\t</buttondiv>\n    </TimerSetDiv>\n  );\n}\n\nexport default TimerSet;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TimerSet from './TimerSet.js';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams\n} from \"react-router-dom\";\n\n\nfunction App() {  \n  return (\n    <Router>\n      <div className=\"App\">\n\t<TimerSet />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import * as NoSleep from 'nosleep.js';\nvar noSleep = new NoSleep();\ndocument.addEventListener('click', function enableNoSleep() {\n  document.removeEventListener('click', enableNoSleep, false);\n  console.log('enabling no sleep');\n  noSleep.enable();\n}, false);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport utils from './utils';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}