{"version":3,"sources":["Timer.js","TimerSet.js","App.js","serviceWorker.js","index.js"],"names":["TimerDiv","styled","div","Timer","props","propstime","time","start","onEnd","useState","setTime","originalTime","setOriginalTime","animate","useCallback","newTime","Date","console","warn","Math","ceil","useEffect","handle","requestAnimationFrame","cancelAnimationFrame","window","noSleep","document","addEventListener","nosleep","disable","NoSleep","enable","TimerSetDiv","TimerSet","setStart","timeset","setTimeset","running","setRunning","timesetquery","URLSearchParams","useLocation","search","get","timesetstr","sections","split","section","repeat","labels","times","map","x","parseInt","log","i","length","atimeset","label","push","parseTimeset","progress","slice","reduce","a","b","nexttime","nextlabel","buttonicon","key","onClick","className","LinearProgress","variant","value","color","Fab","aria-label","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29ea7163.chunk.js","sourcesContent":["import React,{useEffect, useState, useCallback} from 'react';\n//import Beep from './beep.js';\n\nimport styled from 'styled-components';\n\nconst TimerDiv = styled.div`\n   display:flex;\n   align-items: flex-end;\n   justify-content:center;\n   flex:1;\n   font-size:10em;\n   letter-spacing:1px;\n    max-height: 180px;\n    align-items: center;\n`;\n\n//const shortbeep = Beep({duration:0.2});\n\nconst Timer = (props) => {\n  const {time:propstime, start, onEnd} = props;\n  const [time,setTime] = useState(propstime);\n  const [originalTime,setOriginalTime] = useState(propstime);\n\n  const animate = useCallback(()=>{\n    if (start) {\n      let newTime = originalTime - ((new Date() - start)/1000);\n      if (newTime <= 0.2) {\n\tnewTime = 0;\n\tsetTime(0);\n\tconsole.warn('ending!');\n\tonEnd();\n      }\n      else {\n\tif (Math.ceil(time) > Math.ceil(newTime)) {\n\t  if (newTime <= 3) {\n\t    //shortbeep(1);\n\t  }\n\t  if (newTime <= 1) {\n\t    //shortbeep(2);\n\t  }\n\t}\n\tsetTime(newTime);\n      }\n    }\n  }, [start, onEnd, time, originalTime]);\n\n  useEffect(()=>{\n    \n    const handle = requestAnimationFrame(animate);\n    return ()=>{\n      cancelAnimationFrame(handle);\n    };\n  },[time, animate]);\n\n  useEffect(()=> {\n    if (start) {\n      //console.warn('Timer starts! use effect timer start', start, time);\n      const handle = requestAnimationFrame(animate);\n      return ()=>{\n\tcancelAnimationFrame(handle);\n      };\n    }\n    else {\n      //console.log('setting original time');\n      setOriginalTime(time);\n    }\n  }, [start, animate, time]);\n\n  useEffect(()=> {\n    //console.log('props.time changed, setting', propstime);\n    setOriginalTime(propstime);\n  },[propstime]);\n\n\n  return (\n    <TimerDiv>\n      {time !== -1 ? Math.ceil(time) : 'fin'}\n    </TimerDiv>\n  );\n}\n\nexport default Timer;\n","import React,{useEffect, useState} from 'react';\nimport Timer from './Timer.js';\nimport styled from 'styled-components';\n//import Beep from './beep.js';\n\nimport Fab from '@material-ui/core/Fab';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport {\n  useLocation\n} from \"react-router-dom\";\n\nimport NoSleep from 'nosleep.js';\nwindow.noSleep = null;\ndocument.addEventListener('click',  () => {\n  if (window.nosleep) window.nosleep.disable(); // Just to be sure if you forgot to disable.\n  window.nosleep = new NoSleep();\n  window.nosleep.enable();\n}, false);\n\n//const short= Beep({duration:0.2, interval:150});\n\nconst TimerSetDiv = styled.div`\n  flex:1;\n  display:flex;\n  flex-direction:column;\n  justify-content:center;\n  align-items:center;\n\n  background:black;\n\n  padding:20px;\n\n  buttondiv {\n    position:relative;\n    display:flex;\n    flex:1;\n    max-height:50px;\n  }\n  button {\n   text-transform:uppercase;\n   flex:1;\n  }\n\n  counter {\n    display: flex;\n    flex-direction:column;\n    flex:1;\n    font-size:20px;\n    max-height: 40px;\n    align-items: center;\n  }\n\n  .progress {\n    padding-top:15px;\n    width:100px;\n    .MuiLinearProgress-root {\n     height:8px;\n    }\n \n  } \n\n  label {\n   text-transform:capitalize;\n   max-height:50px;\n   font-size:30px;\n   flex:1;\n   align-items:flex-start;\n  }\n\n  sublabel {\n   display:flex;\n   cursor:pointer;\n   max-height:40px;\n   font-size:16px;\n   color:grey;\n   flex:1;\n   align-items:center;\n  }\n\n`;\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\n\nconst TimerSet = (props) => {\n  const [start,setStart] = useState(null);\n  const [timeset,setTimeset] = useState(null);\n  const [running, setRunning] = useState(0);\n\n  let query = useQuery();\n  let timesetquery = query.get('set'); \n  if (!timesetquery) {\n    timesetquery = `1,Get ready,5|9,Work/Rest,30/10`;\n  }\n\n\n  const parseTimeset = (timesetstr)=> {\n    const timeset = [];\n    const sections = timesetstr.split('|');\n    for (let section of sections) {\n      let [repeat,labels,times] = section.split(',');\n      times = times.split('/').map(x=>parseInt(x));\n      labels = labels.split('/');\n      console.log('parts', repeat, labels, times, section);\n      for (let i = 0; i < repeat*labels.length; i++) {\n\tlet atimeset = {label: labels[i % labels.length], time: times[i % times.length]};\n\ttimeset.push(atimeset);\n      }\n    }\n    console.log('parsed', timeset);\n    return timeset;\n  };\n\n  useEffect(()=>{\n    const timeset = parseTimeset(timesetquery);\n    setTimeset(timeset);\n  },[timesetquery]);\n  \n  useEffect(()=>{\n    console.warn('start changed! start from timerset', start);\n  },[start]);\n\n  if (!timesetquery) {\n    return null;\n  }\n\n  if (!timeset || !timeset[running]) {\n    return null;\n  }\n  \n  const progress = timeset.slice(0,running+1).reduce((a,b)=>(a + b.time), 0) / timeset.reduce((a,b)=>(a + b.time), 0) * 100;\n  \n  console.log('progress', progress);\n  \n  const {time,label} = timeset[running];\n  const {time:nexttime,label:nextlabel} = timeset[running+1] || {};\n  \n  console.log('label', label, time, running, timeset);\n\n  const buttonicon = start ? <PauseIcon /> : <PlayArrowIcon />;\n  \n  return (\n    <TimerSetDiv>\n      <label>{label}</label>\n      <Timer key={running} {...{time, label, running}}\n\t     onEnd={()=> {\n\t       console.warn('on end on timerset!');\n\t       setStart(null); // because we set 2 states here, prevent 2 starts\n\t       if (timeset[running+1]) {\n\t\t setRunning(running=>running+1);\n\t\t setStart(new Date());\n\t       }\n\t       else {\n\t\t// shortbeep(3);\n\t       }\n\t}}\n\tstart={start} />\n\t<sublabel onClick={()=>{\n\t    setStart(null); // because we set 2 states here, prevent 2 starts\n\t    if (timeset[running+1]) {\n\t      setRunning(running=>running+1);\n\t    }\n\t  }}>{nextlabel ? `Next: ${nextlabel} / ${nexttime}` : ``}</sublabel>\n\t<counter>\n\t  <div className=\"progress\"><LinearProgress variant=\"determinate\" value={progress} color=\"secondary\" /></div>\n\t</counter>\n\t<buttondiv>\n\t  <Fab color=\"primary\" aria-label=\"run\"\n\t       onClick={()=> {\n\t\t /*if (window.audiocontext.state === 'suspended') {\n\t\t   window.audiocontext.resume();\n\t\t }*/\n\t\t start ? setStart(null) : setStart(new Date())\n\t    }}>\n\t    {buttonicon}\n\t  </Fab>\n\t</buttondiv>\n    </TimerSetDiv>\n  );\n}\n\nexport default TimerSet;\n","import React from 'react';\nimport './App.css';\nimport TimerSet from './TimerSet.js';\n\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\n\n\nfunction App() {  \n  return (\n    <Router>\n      <div className=\"App\">\n\t<TimerSet />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}